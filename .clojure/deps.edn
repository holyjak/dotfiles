;; The deps.edn file describes the information needed to build a classpath.
;;
;; When using the `clojure` or `clj` script, there are several deps.edn files
;; that are combined:
;; - install-level
;; - user level (this file)
;; - project level (current directory when invoked)
;;
;; For all attributes other than :paths, these config files are merged left to right.
;; Only the last :paths is kept and others are dropped.

{
 ;; Paths
 ;;   Directories in the current project to include in the classpath

 ;; :paths ["src"]

 ;; External dependencies

 ;; :deps {
 ;;   org.clojure/clojure {:mvn/version "1.9.0"}
 ;; }

 ;; Aliases
 ;;   resolve-deps aliases (-R) affect dependency resolution, options:
 ;;     :extra-deps - specifies extra deps to add to :deps
 ;;     :override-deps - specifies a coordinate to use instead of that in :deps
 ;;     :default-deps - specifies a coordinate to use for a lib if one isn't found
 ;;   make-classpath aliases (-C) affect the classpath generation, options:
 ;;     :extra-paths - vector of additional paths to add to the classpath
 ;;     :classpath-overrides - map of lib to path that overrides the result of resolving deps

 ;; CREDITS
 ;; - https://github.com/seancorfield/dot-clojure/blob/master/deps.edn
 :aliases {:srepl {:jvm-opts ["-Dclojure.server.repl={:port,5555,:accept,clojure.core.server/repl}"]}
           ;; run the nREPL client in headless mode: clj -A:nrepl <port nr>
           :nrepl {:extra-deps {nrepl/nrepl {:mvn/version "0.6.0"}}
                   :main-opts  ["-m" "nrepl.cmdline" "--connect" "--host" "127.0.0.1" "--port"]}
           :nrepl-db {:extra-deps {nrepl/nrepl {:mvn/version "0.6.0"} nrepl/drawbridge {:mvn/version "0.2.1"}}
                   :main-opts  ["-m" "nrepl.cmdline" "--connect" "--host" "127.0.0.1" "--transport" "drawbridge.client/ring-client-transport" "--port"]}
           :rebel {:extra-deps {com.bhauman/rebel-readline {:mvn/version "RELEASE"}}
                   :main-opts  ["-m" "rebel-readline.main"]}
           :new   {:extra-deps {seancorfield/clj-new {:mvn/version "0.5.5"}}
                   :main-opts  ["-m" "clj-new.create"]}

           ;; - see https://github.com/cognitect-labs/REBL-distro
           ;; - you need to download the REBL JAR (and update the local/root below)
           ;; - you need to be using Clojure 1.10 and either
           ;; - - Oracle JDK 8 -- use :rebl-8
           ;; - - OpenJDK 11 -- use :rebl-11
           :rebl-8
           {:extra-deps {org.clojure/core.async {:mvn/version "0.4.490"}
                         ;; deps for file datafication (0.9.149 or later)
                         org.clojure/data.csv   {:mvn/version "0.1.4"}
                         org.clojure/data.json  {:mvn/version "0.2.3"}
                         org.yaml/snakeyaml     {:mvn/version "1.23"}
                         com.cognitect/rebl     {:local/root "/Users/holyjak/.clojure/REBL.jar"}} ;; adjust to match your install location
            :main-opts  ["-m" "cognitect.rebl"]}
           :rebl-11
           {:extra-deps {org.clojure/core.async      {:mvn/version "0.4.490"}
                         ;; deps for file datafication (0.9.149 or later)
                         org.clojure/data.csv        {:mvn/version "0.1.4"}
                         org.clojure/data.json       {:mvn/version "0.2.3"}
                         org.yaml/snakeyaml          {:mvn/version "1.23"}
                         com.cognitect/rebl          {:local/root "/Users/holyjak/.clojure/REBL.jar"}
                         org.openjfx/javafx-fxml     {:mvn/version "11.0.1"}
                         org.openjfx/javafx-controls {:mvn/version "11.0.1"}
                         org.openjfx/javafx-graphics {:mvn/version "11.0.1"}
                         org.openjfx/javafx-media    {:mvn/version "11.0.1"}
                         org.openjfx/javafx-swing    {:mvn/version "11.0.1"}
                         org.openjfx/javafx-base     {:mvn/version "11.0.1"}
                         org.openjfx/javafx-web      {:mvn/version "11.0.1"}}
            :main-opts  ["-m" "cognitect.rebl"]}

            ;; -Atry lib-name [lib-version] => repl with it
            :try {:extra-deps {deps-try {:git/url "https://gitlab.com/eval/deps-try"
                                         :sha "9ccf64be248d5d9aa641df9e94feaea913bc0687"}}
                  :main-opts ["-m" "deps-try.main"]}

            ;; Show a graph of dependencies using graphviz
            :graph {:deps {org.clojure/tools.deps.graph {:mvn/version "0.2.24"}}
                    :main-opts ["-m" "clojure.tools.deps.graph"]}


           :deps ; to get access to clojure.tools.deps.alpha.repl/add-lib
           ;; - now you can add new deps to a running REPL:
           ;; (require '[clojure.tools.deps.alpha.repl :refer [add-lib]])
           ;; (add-lib 'some/library {:mvn/version "RELEASE"})
           ;; - and you can git deps too; here's how to get the master version of a lib:
           ;; (require '[clojure.tools.gitlibs :as gitlibs])
           ;; (defn load-master [lib]
           ;;   (let [git (str "https://github.com/" lib ".git")]
           ;;    (add-lib lib {:git/url git :sha (gitlibs/resolve git "master")})))
           ;; - e.g., using the GitHub path (not the usual Maven group/artifact):
           ;; (load-master 'clojure/tools.trace)
           {:extra-deps {org.clojure/tools.deps.alpha
                         {:git/url "https://github.com/clojure/tools.deps.alpha"
                          :sha "e160f184f051f120014244679831a9bccb37c9de"}}}}}

;;   :deps {:extra-deps {org.clojure/tools.deps.alpha {:mvn/version "0.5.351"}}}
;;   :test {:extra-paths ["test"]}


;; Provider attributes

;; :mvn/repos {
;;   "central" {:url "https://repo1.maven.org/maven2/"}
;;   "clojars" {:url "https://clojars.org/repo"}
;; }

